/* General Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: Arial, sans-serif;
}

/* Body Background Styling */
body {
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    background: linear-gradient(to bottom, #d4f1f9, #b4e0f5, #94d0f2, #74c0ef, #54b0ec);
    background-image: url("background.jpg");
    background-size: cover;
    padding: 20px; /* Extra padding for smaller screens */
}

/* Container Styling */
.login-container {
    margin-top: 150px;
    background: rgba(255, 255, 255, 0.8);
    padding: 30px 40px;
    border-radius: 15px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    text-align: center;
    width: 100%;
    max-width: 400px; /* Responsive max width */
}

/* Title Styling */
.login-container h1 {
    color: #0072ff;
    font-size: 24px;
    margin-bottom: 20px;
}

/* Input Field Styling */
.login-container input[type="text"] {
    width: 100%;
    padding: 10px;
    margin-bottom: 20px;
    border: 1px solid #5f597c9c;
    border-radius: 5px;
    outline: none;
    font-size: 16px;
    transition: border-color 0.3s ease; /* Smooth transition */
}

.login-container input[type="text"]:focus {
    border-color: #0072ff; /* Highlighted border on focus */
    box-shadow: 0 0 5px rgba(0, 114, 255, 0.5); /* Soft glow effect */
}

/* Button Styling */
.login-container button {
    width: 100%;
    padding: 10px;
    background: #0072ff;
    color: white;
    font-size: 16px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s ease, transform 0.2s ease;
}

.login-container button:hover {
    background: #0056b3;
    transform: translateY(-2px); /* Slight hover lift effect */
}

.login-container button:active {
    transform: translateY(0); /* Reset when clicked */
    background: #003f7f; /* Darker color on click */
}

/* Media Query for Responsiveness */
@media (max-width: 600px) {
    .login-container {
        padding: 20px;
    }

    .login-container h1 {
        font-size: 20px;
    }
    login-container {
        margin-top: 100px; /* Less margin for smaller screens */
    }

    .login-container input[type="text"],
    .login-container button {
        font-size: 14px;
    }
}/* Navbar Styling */
.navbar {
    display: flex;
    justify-content: space-between; /* يوزع العناصر بين الجانبين */
    align-items: center;
    background: rgba(255, 255, 255, 0.9); /* خلفية شفافة */
    padding: 10px 20px; /* مساحة داخلية للحاوية */
    border-bottom: 2px solid #0072ff; /* خط سفلي */
    position: absolute; /* يضع الشريط في الأعلى */
    top: 0;
    left: 0;
    width: 100%;
    z-index: 10; /* يضمن ظهوره فوق العناصر الأخرى */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* تأثير الظل */
}

/* Logo Styling */
.navbar img {
    height: 50px; /* التحكم في حجم اللوجو */
    width: auto;
}

.navbar .club-logo {
    margin-right: 10px; /* مسافة من النص */
}

.navbar .university-logo {
    margin-left: 10px; /* مسافة من النص */
}

/* Title Styling */
.navbar .title {
    font-size: 18px;
    font-weight: bold;
    color: #0072ff;
    text-align: center;
}

/* Adjusting the Login Container */
.login-container {
    margin-top: 100px; /* تأخير الحاوية لتظهر أسفل الشريط */
}
 .leaderboard h1 {
            text-align: center;
            color: #333;
            margin-bottom: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        table, th, td {
            border: 1px solid #ddd;
        }
        th, td {
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        tr.gold {
            background-color: #f3f0e0;
        }
        tr.silver {
            background-color: #fdf5f5;
        }
        tr.bronze {
            background-color: #f3efeb;
        }
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: scale(0.95);
            }
            to {
                opacity: 1;
                transform: scale(1);
            }
        }
 <!-- Leaderboard Section -->
    <div class="leaderboard">
        <h1>Leaderboard</h1>
        <table>
            <thead>
                <tr>
                    <th>Rank</th>
                    <th>Player</th>
                    <th>Score</th>
                    <th>Time</th>
                </tr>
            </thead>
            <tbody id="leaderboard-body">
                <!-- Dynamic rows will be inserted here -->
            </tbody>
        </table>
    </div>

    <script>
   // Example leaderboard data
        let leaderboard = [
            { player: "Player1", score: 1000, time: "12:30 PM" },
            { player: "Player2", score: 900, time: "12:32 PM" },
            { player: "Player3", score: 800, time: "12:35 PM" }
        ];

        // Function to render leaderboard
        function renderLeaderboard() {
            const tbody = document.getElementById('leaderboard-body');
            tbody.innerHTML = '';  // Clear current content

            // Sort leaderboard by score and then by time (earlier times rank higher)
            leaderboard.sort((a, b) => {
                if (b.score === a.score) {
                    return new Date(a.time) - new Date(b.time); // If scores are the same, compare times
                }
                return b.score - a.score; // Otherwise, compare by score
            });

            leaderboard.forEach((entry, index) => {
                const row = document.createElement('tr');
                if (index === 0) row.classList.add('gold');
                else if (index === 1) row.classList.add('silver');
                else if (index === 2) row.classList.add('bronze');

                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${entry.player}</td>
                    <td>${entry.score}</td>
                    <td>${entry.time}</td>
                `;
                tbody.appendChild(row);
            });
        }

        // Function to update score and time for a player when they finish
        function updateScore(player, newScore) {
            let playerEntry = leaderboard.find(entry => entry.player === player);
            const currentTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

            if (playerEntry) {
                playerEntry.score = newScore; // Update existing player's score
                playerEntry.time = currentTime; // Update the time they finished
            } else {
                leaderboard.push({
                    player: player,
                    score: newScore,
                    time: currentTime
                });
            }
            renderLeaderboard(); // Re-render the leaderboard
        }

        // Example: Simulate players finishing
        setTimeout(() => {
            updateScore("Player1", 1100); // Player1 finishes with a new score
        }, 2000);
        setTimeout(() => {
            updateScore("Player2", 950); // Player2 finishes with a new score
        }, 4000);
        setTimeout(() => {
            updateScore("Player3", 850); // Player3 finishes with a new score
        }, 6000);



